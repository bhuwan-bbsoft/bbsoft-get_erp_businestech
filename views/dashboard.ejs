<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('partials/head') %>
    <title>Dashboard - Sales & Quotation System</title>
    <link
            href="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.css"
            rel="stylesheet"
    />

    <style>


        @media screen and (max-width: 639px) {
            .admin-report-bar {
                display: flex;
                flex-direction: column;
                margin-bottom: 30px;

                h1 {
                    display: none;
                }

                .panel {
                    width: 100% !important;
                    margin-top: 50px;
                }
            }

            .user_dashboard_report {
                div {
                    display: flex;
                    flex-direction: column;

                    div {
                        width: 100%;
                    }

                    .first_report {
                        display: flex;
                        gap: 0px;

                        div {
                            display: inline-block;

                        }
                    }

                    .second_report {
                        display: inline-block;
                        gap: 0px;

                        div {
                            display: inline-block;
                        }

                        .chart_report {
                            display: flex;

                            .first_chart_report {
                                display: flex;
                                flex-direction: row;
                                justify-content: space-between;
                                align-items: center;

                                div {
                                    width: fit-content;
                                    display: flex;
                                    gap: 10px;

                                    div {
                                        display: flex;
                                        flex-direction: row;
                                    }
                                }
                            }

                            .second_chart_report {

                            }
                        }

                    }
                }

            }
        }

        .button_sizebar {
            position: fixed;
            z-index: 2 !important;
        }
    </style>

</head>
<body class="bg-gray-100">


<div>
    <button data-drawer-target="default-sidebar" data-drawer-toggle="default-sidebar" aria-controls="default-sidebar"
            type="button"
            class="button_sizebar inline-flex items-center px-4 my-4 ms-3 text-sm text-gray-100 rounded-lg sm:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600">
        <span class="sr-only">Open sidebar</span>
        <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20"
             xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" fill-rule="evenodd"
                  d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"></path>
        </svg>
    </button>

    <aside id="default-sidebar"
           class="fixed top-0 left-0 z-40 w-64 h-screen transition-transform -translate-x-full sm:translate-x-0"
           aria-label="Sidebar">
        <div class="h-full px-3 py-4 overflow-y-auto bg-gray-50 dark:bg-gray-800">
            <a href="/" class="text-2xl font-bold ">Resource Dashboard</a>
            <ul class="space-y-1.5 mt-5 font-medium">
                <% if( currentUser.user_level == 2){ %>
                    <li onclick="openEditAccountModal()"
                        class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                             class="icon icon-tabler icons-tabler-outline icon-tabler-edit">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1"/>
                            <path d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z"/>
                            <path d="M16 5l3 3"/>
                        </svg>
                        <span class="flex-1 ms-3 whitespace-nowrap">Edit Account</span>
                    </li>
                    <li class="flex items-center text-red-500 p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                             class="icon icon-tabler icons-tabler-outline icon-tabler-power">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M7 6a7.75 7.75 0 1 0 10 0"/>
                            <path d="M12 4l0 8"/>
                        </svg>
                        <a href="/logout" class="flex-1 ms-3 whitespace-nowrap ">Logout</a>
                    </li>

                <% } else if(currentUser.user_level == 1) { %>
                    <li onclick="openEditAccountModal()"
                        class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                             class="icon icon-tabler icons-tabler-outline icon-tabler-edit">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1"/>
                            <path d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z"/>
                            <path d="M16 5l3 3"/>
                        </svg>
                        <span class="flex-1 ms-3 whitespace-nowrap">Edit Account</span>
                    </li>
                    <li onclick="openCompanyModal()"
                        class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                             class="icon icon-tabler icons-tabler-outline icon-tabler-building-community">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M8 9l5 5v7h-5v-4m0 4h-5v-7l5 -5m1 1v-6a1 1 0 0 1 1 -1h10a1 1 0 0 1 1 1v17h-8"/>
                            <path d="M13 7l0 .01"/>
                            <path d="M17 7l0 .01"/>
                            <path d="M17 11l0 .01"/>
                            <path d="M17 15l0 .01"/>
                        </svg>
                        <span class="flex-1 ms-3 whitespace-nowrap">Company</span>
                    </li>
                    <li onclick="openManageUserModel()"
                        class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                             class="icon icon-tabler icons-tabler-outline icon-tabler-user-check">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M8 7a4 4 0 1 0 8 0a4 4 0 0 0 -8 0"/>
                            <path d="M6 21v-2a4 4 0 0 1 4 -4h4"/>
                            <path d="M15 19l2 2l4 -4"/>
                        </svg>
                        <span class="flex-1 ms-3 whitespace-nowrap">Manage User</span>
                    </li>
                    <li class="flex items-center text-red-500 p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                             class="icon icon-tabler icons-tabler-outline icon-tabler-power">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M7 6a7.75 7.75 0 1 0 10 0"/>
                            <path d="M12 4l0 8"/>
                        </svg>
                        <a href="/logout" class="flex-1 ms-3 whitespace-nowrap ">Logout</a>
                    </li>

                <% } %>
            </ul>
        </div>
    </aside>

    <div class=" sm:ml-64">
        <%- include('partials/navbar') %>
        <div class=" border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700">
            <div class="mx-auto px-4 py-8 ">
                <div class="flex justify-between admin-report-bar ">
                    <h1 class="text-3xl font-bold mb-4">Dashboard</h1>
                    <% if(currentUser.user_level == 1) { %>
                        <%
                            let reportPercentage = (totalFinancialReport.total_achieved / totalFinancialReport.total_target) * 100
                        %>
                        <div class="w-[30%]  flex flex-col gap-2 panel">
                            <h3 class="text-2xl font-bold">Total Progress</h3>
                            <div class="bg-gray-200 dark:bg-gray-700">
                                <div class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full"
                                     style="width: <%= reportPercentage %>%">
                                    <%= reportPercentage.toFixed(2) %> %
                                </div>
                            </div>
                            <div class="flex flex-col gap-0">
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Target</span>
                                    <span class="text-lg text-gray-600">:</span
                                    ><span class="text-green-600 font-bold"> <%- totalFinancialReport.total_target %> </span>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Achieved</span>
                                    <span class="text-lg text-gray-600">:</span>
                                    <span class="text-[#36A2EB] font-bold"> <%- totalFinancialReport.total_achieved %> </span>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Balance to go</span>
                                    <span class="text-lg text-gray-600">:</span>
                                    <span class="text-[#FFCE56] font-bold"> <%- totalFinancialReport.total_balance_to_go %> </span>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>


                <!-- show only is userLevel is user -->
                <% if(currentUser.user_level === 2) { %>
                    <!-- user target  -->
                    <div class="mb-4 user_dashboard_report">
                        <div
                                class="flex justify-between border p-6 rounded-lg shadow-lg bg-white"
                        >
                            <div class="flex w-1/2 flex-col gap-4 first_report">
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Name</span>
                                    <span class="text-lg text-gray-600">:</span>
                                    <span class="text-gray-800"><%- currentUser?.name %></span>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Designation</span>
                                    <span class="text-lg text-gray-600">:</span>
                                    <span class="text-gray-800"><%- financialTarget[0]?.designation %></span>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Role</span>
                                    <span class="text-lg text-gray-600">:</span>
                                    <span class="text-gray-800">
                                        <%- financialTarget[0]?.role %></span>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Manager</span>
                                    <span class="text-lg text-gray-600">:</span>
                                    <span class="text-gray-800"><%- financialTarget[0]?.sales_manager %></span>
                                </div>
                            </div>
                            <div class="flex w-1/2 flex-col gap-6 second_report">
                                <div class="flex items-center space-x-2 text-lg text-gray-800">
                                    <span>Financial Year:</span>
                                    <span class="font-semibold"><%- financialTarget[0]?.financial_year %></span>
                                </div>
                                <div class="mr-5 flex items-center gap-6 chart_report">
                                    <div class="flex flex-col first_chart_report">
                                        <div class="my_chart flex h-32 w-32 items-center justify-center rounded-full bg-indigo-600 text-white text-2xl font-bold shadow-md">
                                            <canvas id="myPieChart"></canvas>
                                        </div>
                                        <div class="flex flex-col gap-2 text-sm">
                                            <div class="flex gap-1"><span class="px-2 py-1/2 bg-green-50 border "
                                                                          id="color-balance"></span> Balance To GO
                                            </div>
                                            <div class="flex gap-1"><span class="px-2 py-1/2 bg-green-50 border "
                                                                          id="color-achieve"></span> Achieved Till Date
                                            </div>
                                        </div>
                                    </div>

                                    <div class="flex flex-col gap-4 second_chart_report">
                                        <div class="flex items-center space-x-2">
                                            <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Target</span>
                                            <span class="text-lg text-gray-600">:</span
                                            ><span class="text-green-600 font-bold" id="business_target"></span>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Achieved</span>
                                            <span class="text-lg text-gray-600">:</span>
                                            <span class="text-[#36A2EB] font-bold" id="achieved_till_date"></span>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            <span class="text-lg font-semibold text-gray-700 min-w-[7rem]">Balance to go</span>
                                            <span class="text-lg text-gray-600">:</span>
                                            <span class="text-[#FFCE56] font-bold" id="balance_to_go"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } %>

                <!-- tab  -->
                <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
                    <ul
                            class="flex flex-wrap -mb-px text-sm font-medium text-center"
                            id="default-tab"
                            data-tabs-toggle="#default-tab-content"
                            role="tablist"
                    >
                        <li class="me-2" role="presentation">
                            <button
                                    class="inline-block border-b-2 bg-gray-200 px-4 py-2 text-lg rounded-t-lg"
                                    id="sales-tab"
                                    data-tabs-target="#sales"
                                    type="button"
                                    role="tab"
                                    aria-controls="sales"
                                    aria-selected="false"
                            >
                                Sales
                            </button>
                        </li>
                        <li class="me-2" role="presentation">
                            <button
                                    class="inline-block border-b-2 px-4 bg-gray-200 py-2 text-lg rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300"
                                    id="quotation-tab"
                                    data-tabs-target="#quotation"
                                    type="button"
                                    role="tab"
                                    aria-controls="quotation"
                                    aria-selected="false"
                            >
                                Quotation
                            </button>
                        </li>
                    </ul>
                </div>
                <div id="default-tab-content">
                    <div
                            class="hidden rounded-lg bg-gray-50 dark:bg-gray-800"
                            id="sales"
                            role="tabpanel"
                            aria-labelledby="sales-tab"
                    >
                        <div>
                            <div class="flex  justify-end">
                                <div class="space-x-1 mb-3">
                                    <button
                                            onclick="generatePDF(<%= JSON.stringify(sales) %>, 'sales',  company )"
                                            class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
                                    >
                                        <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                width="24"
                                                height="24"
                                                viewBox="0 0 24 24"
                                                fill="none"
                                                stroke="currentColor"
                                                stroke-width="2"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                class="icon icon-tabler icons-tabler-outline icon-tabler-file-type-pdf"
                                        >
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                            <path d="M14 3v4a1 1 0 0 0 1 1h4"/>
                                            <path d="M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4"/>
                                            <path d="M5 18h1.5a1.5 1.5 0 0 0 0 -3h-1.5v6"/>
                                            <path d="M17 18h2"/>
                                            <path d="M20 15h-3v6"/>
                                            <path
                                                    d="M11 15v6h1a2 2 0 0 0 2 -2v-2a2 2 0 0 0 -2 -2h-1z"
                                            />
                                        </svg>
                                    </button>

                                    <button
                                            onclick="generateExcel('sales', <%= JSON.stringify(sales) %>, <%= JSON.stringify(quotations) %>)"
                                            class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded"
                                    >
                                        <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                width="24"
                                                height="24"
                                                viewBox="0 0 24 24"
                                                fill="none"
                                                stroke="currentColor"
                                                stroke-width="2"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                class="icon icon-tabler icons-tabler-outline icon-tabler-file-type-xls"
                                        >
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                            <path d="M14 3v4a1 1 0 0 0 1 1h4"/>
                                            <path d="M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4"/>
                                            <path d="M4 15l4 6"/>
                                            <path d="M4 21l4 -6"/>
                                            <path
                                                    d="M17 20.25c0 .414 .336 .75 .75 .75h1.25a1 1 0 0 0 1 -1v-1a1 1 0 0 0 -1 -1h-1a1 1 0 0 1 -1 -1v-1a1 1 0 0 1 1 -1h1.25a.75 .75 0 0 1 .75 .75"
                                            />
                                            <path d="M11 15v6h3"/>
                                        </svg>
                                    </button>

                                    <button
                                            onclick="printData('sales' , <%= JSON.stringify(sales) %>, <%= JSON.stringify(quotations) %>)"
                                            class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                                    >
                                        <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                width="24"
                                                height="24"
                                                viewBox="0 0 24 24"
                                                fill="none"
                                                stroke="currentColor"
                                                stroke-width="2"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                class="icon icon-tabler icons-tabler-outline icon-tabler-printer"
                                        >
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                            <path
                                                    d="M17 17h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v4a2 2 0 0 0 2 2h2"
                                            />
                                            <path d="M17 9v-4a2 2 0 0 0 -2 -2h-6a2 2 0 0 0 -2 2v4"/>
                                            <path
                                                    d="M7 13m0 2a2 2 0 0 1 2 -2h6a2 2 0 0 1 2 2v4a2 2 0 0 1 -2 2h-6a2 2 0 0 1 -2 -2z"
                                            />
                                        </svg>
                                    </button>

                                    <button onclick="exportToPDF('Sales','sales_table',company)">Print</button>
                                </div>
                            </div>
                            <div class="overflow-x-auto">
                                <table class="min-w-full bg-white" id="sales_table">
                                    <thead>
                                    <tr class="[&>th]:py-2 [&>th]:px-4 [&>th]:border-b [&>th]:whitespace-nowrap">
                                        <th>Date</th>
                                        <th>Service Name</th>
                                        <th>Description</th>
                                        <th>Serial Number</th>
                                        <th>Edition</th>
                                        <th>Amount Billed (&#x20b9;)</th>
                                        <th>GST Amount(&#x20b9;)</th>
                                        <th>Total Amount (&#x20b9;)</th>
                                        <th>Next Renew Date</th>
                                        <th>Remarks</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    <%
                                    let amountSales = 0;
                                    let gstSales = 0;
                                    let totalSales = 0;
                                    %>
                                    <% sales.forEach(sale => { %>
                                        <%
                                            amountSales += parseFloat(sale.amount_billed);
                                            gstSales += parseFloat(sale.gst_amount);
                                            totalSales += parseFloat(sale.total_amount);
                                        %>
                                        <tr class="[&>td]:py-2 [&>td]:px-4 [&>td]:border-b [&>td]:whitespace-nowrap ">
                                            <td class="min-w-[8rem]">
                                                <%= sale.date.toISOString().split('T')[0] %>
                                            </td>
                                            <td><%= sale.service_name %></td>
                                            <td><%= sale.description %></td>
                                            <td><%= sale.serial_no %></td>
                                            <td><%= sale.edition %></td>
                                            <td class="text-right"><%= sale.amount_billed %></td>
                                            <td class="text-right"><%= sale.gst_amount %></td>
                                            <td class="text-right"><%= sale.total_amount %></td>
                                            <td class="min-w-[8rem]">
                                                <%= sale.next_renewal_date
                                                %>
                                            </td>
                                            <td><%= sale.remarks %></td>
                                        </tr>
                                    <% }); %>
                                    <% if(sales && sales.length > 0){ %>
                                        <tr class="[&>td]:py-2 [&>td]:px-4 [&>td]:border-b [&>td]:font-semibold [&>td]:whitespace-nowrap ">
                                            <td></td>
                                            <td class="min-w-[8rem] font-semibold flex items-center justify-end">
                                                Total
                                            </td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td class="text-right"> <%- amountSales.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), 2 %> </td>
                                            <td class="text-right"><%- gstSales.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                                            <td class="text-right"><%- totalSales.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                                            <td class="min-w-[8rem]">

                                            </td>
                                            <td></td>
                                        </tr>
                                    <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div
                            class="hidden rounded-lg bg-gray-50 dark:bg-gray-800"
                            id="quotation"
                            role="tabpanel"
                            aria-labelledby="quotation-tab"
                    >
                        <div>
                            <div class="flex justify-end">
                                <div class="space-x-1 mb-3">
                                    <!-- PDF Button -->
                                    <button
                                            onclick="generatePDF(<%= JSON.stringify(quotations) %>, 'quotation', company)"
                                            class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
                                    >
                                        <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                width="24"
                                                height="24"
                                                viewBox="0 0 24 24"
                                                fill="none"
                                                stroke="currentColor"
                                                stroke-width="2"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                class="icon icon-tabler icons-tabler-outline icon-tabler-file-type-pdf"
                                        >
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                            <path d="M14 3v4a1 1 0 0 0 1 1h4"/>
                                            <path d="M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4"/>
                                            <path d="M5 18h1.5a1.5 1.5 0 0 0 0 -3h-1.5v6"/>
                                            <path d="M17 18h2"/>
                                            <path d="M20 15h-3v6"/>
                                            <path
                                                    d="M11 15v6h1a2 2 0 0 0 2 -2v-2a2 2 0 0 0 -2 -2h-1z"
                                            />
                                        </svg>
                                    </button>

                                    <button
                                            onclick="generateExcel('quotations', <%= JSON.stringify(sales) %>, <%= JSON.stringify(quotations) %>)"
                                            class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded"
                                    >
                                        <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                width="24"
                                                height="24"
                                                viewBox="0 0 24 24"
                                                fill="none"
                                                stroke="currentColor"
                                                stroke-width="2"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                class="icon icon-tabler icons-tabler-outline icon-tabler-file-type-xls"
                                        >
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                            <path d="M14 3v4a1 1 0 0 0 1 1h4"/>
                                            <path d="M5 12v-7a2 2 0 0 1 2 -2h7l5 5v4"/>
                                            <path d="M4 15l4 6"/>
                                            <path d="M4 21l4 -6"/>
                                            <path
                                                    d="M17 20.25c0 .414 .336 .75 .75 .75h1.25a1 1 0 0 0 1 -1v-1a1 1 0 0 0 -1 -1h-1a1 1 0 0 1 -1 -1v-1a1 1 0 0 1 1 -1h1.25a.75 .75 0 0 1 .75 .75"
                                            />
                                            <path d="M11 15v6h3"/>
                                        </svg>
                                    </button>

                                    <button
                                            onclick="printData('quotations' , <%= JSON.stringify(sales) %>, <%= JSON.stringify(quotations) %>)"
                                            id="quotations"
                                            class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                                    >
                                        <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                width="24"
                                                height="24"
                                                viewBox="0 0 24 24"
                                                fill="none"
                                                stroke="currentColor"
                                                stroke-width="2"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                class="icon icon-tabler icons-tabler-outline icon-tabler-printer"
                                        >
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                            <path
                                                    d="M17 17h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v4a2 2 0 0 0 2 2h2"
                                            />
                                            <path d="M17 9v-4a2 2 0 0 0 -2 -2h-6a2 2 0 0 0 -2 2v4"/>
                                            <path
                                                    d="M7 13m0 2a2 2 0 0 1 2 -2h6a2 2 0 0 1 2 2v4a2 2 0 0 1 -2 2h-6a2 2 0 0 1 -2 -2z"
                                            />
                                        </svg>
                                    </button>
                                    <button onclick="exportToPDF('Quotations','quotation_table',company)">Print</button>
                                </div>
                            </div>
                            <div class="overflow-x-auto">
                                <table class="min-w-full bg-white" id="quotation_table">
                                    <thead>
                                    <tr class="[&>th]:py-2 [&>th]:px-4 [&>th]:border-b [&>th]:whitespace-nowrap ">
                                        <th>Date</th>
                                        <th>Service Name</th>
                                        <th>Description</th>
                                        <th>Serial Number</th>
                                        <th>Edition</th>
                                        <th>Amount Billed (&#x20b9;)</th>
                                        <th>GST Amount(&#x20b9;)</th>
                                        <th>Total Amount (&#x20b9;)</th>
                                        <th>Next Renew Date</th>
                                        <th>Remarks</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    <%
                                    let amountQuotation = 0;
                                    let gstQuotation = 0;
                                    let totalQuotation = 0;
                                    %>
                                    <% quotations.forEach(quotation => { %>
                                        <%
                                            amountQuotation += parseFloat(quotation.amount_billed);
                                            gstQuotation += parseFloat(quotation.gst_amount);
                                            totalQuotation += parseFloat(quotation.total_amount);
                                        %>
                                        <tr class="[&>td]:py-2 [&>td]:px-4 [&>td]:border-b [&>td]:whitespace-nowrap">
                                            <td class="min-w-[8rem]">
                                                <%= quotation.date.toISOString().split('T')[0] %>
                                            </td>
                                            <td><%= quotation.service_name %></td>
                                            <td><%= quotation.description %></td>
                                            <td><%= quotation.serial_no %></td>
                                            <td><%= quotation.edition %></td>
                                            <td class="text-right"><%= quotation.amount_billed %></td>
                                            <td class="text-right"><%= quotation.gst_amount %></td>
                                            <td class="text-right"><%= quotation.total_amount %></td>
                                            <td class="flex flex-col min-w-[8rem]"><%= quotation.next_renewal_date %></td>
                                            <td><%= quotation.remarks %></td>
                                        </tr>
                                    <% }); %>
                                    <% if(quotations && quotations.length > 0) { %>
                                        <tr class="[&>td]:py-2 [&>td]:px-4 [&>td]:border-b [&>td]:font-semibold [&>td]:whitespace-nowrap ">
                                            <td></td>
                                            <td class="min-w-[8rem] font-semibold flex items-center justify-end">
                                                Total
                                            </td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td class="text-right"> <%- amountQuotation.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %> </td>
                                            <td class="text-right"><%- gstQuotation.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                                            <td class="text-right"><%- totalQuotation.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                                            <td class="min-w-[8rem]">

                                            </td>
                                            <td></td>
                                        </tr>
                                    <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    function exportToPDF(name, tableId, company) {
        const {jsPDF} = window.jspdf;
        const doc = new jsPDF();

        const pageWidth = doc.internal.pageSize.width;


        doc.setFontSize(16);
        doc.text(company?.name.trim(), 14, 20);
        doc.setFontSize(10);
        doc.text(`GSTIN:  ${company?.gstin.trim()} `, 14, 25);
        doc.text(`PAN No.:  ${company?.pan_number.trim()} `, 14, 30);


        doc.text(`${company?.website.trim()}`, 135, 20);
        doc.text(`${company?.mobile.trim()}`,135,25);
        doc.text(`${company?.address.trim()}`,135,30);
        doc.text(`${company?.city.trim()}, ${company?.state.trim()}, ${company?.country.trim()}`,135,35);

        doc.setFontSize(15);
        const reportTitle = `${name.charAt(0).toUpperCase() + name.slice(1)} Report`;
        doc.text(reportTitle, pageWidth / 2 - doc.getTextWidth(reportTitle) / 2, 45);

        doc.setFontSize(6);
        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 3);
        doc.setFontSize(12);

        const rows = Array.from(document.querySelectorAll(`#${tableId} tbody tr`)).map(row => {
            const cells = row.querySelectorAll('td');
            return Array.from(cells).map(cell => cell.innerText.trim());
        });


        doc.autoTable({
            head: [['Date', 'Service Name', 'Description', 'Serial Number', 'Edition', 'Amount Billed', 'GST Amount', 'Total Amount', 'Next Renew Date', 'Remarks']],
            body: rows,
            startY: 55,
            theme: 'grid',
            styles: {fontSize: 8, halign: 'center'},
            columnStyles: {
                0: {halign: 'center'},  // First column centered
                1: {halign: 'center'},
                2: {halign: 'center'},
                3: {halign: 'center'},
                4: {halign: 'left'},    // Align 'Customer Name' to the left
                5: {halign: 'center'},
                6: {halign: 'right'},
                7: {halign: 'right'},
                8: {halign: 'center'},
                9: {halign: 'center'}
            },
            didParseCell: function (data) {
                if (data.row.index === rows.length - 1) {
                    data.cell.styles.fontStyle = 'bold';
                }
            }
        });

        const timestamp = new Date().toISOString().replace(/[-:T.]/g, "").slice(0, 14);
        const fileName = `${name.charAt(0).toUpperCase() + name.slice(1)}_report_${timestamp}.pdf`;
        doc.save(fileName);
    }
</script>

<% if (typeof errorMessage !== 'undefined') { %>
    <div class="fixed top-2 left-1/2">
        <div class="error">
            <div id="toast-danger"
                 class="flex items-center w-full max-w-xs p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800"
                 role="alert">
                <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200">
                    <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                         viewBox="0 0 20 20">
                        <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
                    </svg>
                    <span class="sr-only">Error icon</span>
                </div>
                <div class="ms-3 text-sm font-normal"><%- errorMessage %></div>
                <button type="button"
                        class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
                        data-dismiss-target="#toast-danger" aria-label="Close">
                    <span class="sr-only">Close</span>
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                         viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>

<% } %>

<!--format with commas-->
<script>
    function formatNumberWithCommas(number) {
        return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    const financialTargetJs = <%- JSON.stringify(financialTarget) %>;
    const userLevelJs = <%- currentUser.user_level %>;


    if (userLevelJs !== 1 && financialTargetJs && financialTargetJs.length > 0) {
        const businessTarget = financialTargetJs[0].business_target;
        const achievedTillDate = financialTargetJs[0].achieved_till_date;
        const balanceToGo = financialTargetJs[0].balance_to_go;

        // Format the values and update the DOM
        document.getElementById("business_target").textContent = `₹ ${formatNumberWithCommas(businessTarget)}`;
        document.getElementById("achieved_till_date").textContent = `₹ ${formatNumberWithCommas(achievedTillDate)}`;
        document.getElementById("balance_to_go").textContent = `₹ ${formatNumberWithCommas(balanceToGo)}`;
    }


</script>


<%- include('partials/companyModel') %>
<%- include('partials/editAccountModel') %>
<%- include('partials/manageUserModel') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.com/libraries/pdf.js"></script>

<script>
    // Function to open the company modal
    function openCompanyModal() {
        document.getElementById("companyModal").classList.remove("hidden");
    }

    // Function to close the company modal
    function closeCompanyModal() {
        document.getElementById("companyModal").classList.add("hidden");
    }

    // Function to open the Edit Account modal
    function openEditAccountModal() {
        document.getElementById("editAccountModal").classList.remove("hidden");
    }

    // Function to close the Edit Account modal
    function closeEditAccountModal() {
        document.getElementById("editAccountModal").classList.add("hidden");
    }

    // Function to open Manage User Modal
    function openManageUserModel() {
        document.getElementById("manageUserModel").classList.remove("hidden");
    }

    // Function to close Manage User Modal
    function closeManageUserModel() {
        document.getElementById("manageUserModel").classList.add("hidden");
    }

    // Function to open Add New User Modal
    function openAddNewUserModel() {
        document.getElementById("addNewUserModel").classList.remove("hidden");
    }

    // Function to close Add New User Modal
    function closeAddNewUserModel() {
        document.getElementById("addNewUserModel").classList.add("hidden");
    }

    // Function to open Edit User Modal
    function openEditUserModel(button) {

        const userDetail = JSON.parse(button.getAttribute('data-user'));
        const changePasswordBtn = document.getElementById("change-password-btn");
        changePasswordBtn.setAttribute("data-change-password", userDetail.id);


        const roleMapping = {
            "Admin": 1,
            "User": 2
        };

        // Mapping status string to value
        const statusMapping = {
            "Active": 1,
            "Inactive": 2
        };

        document.getElementById("editUserId").value = userDetail.id;
        document.getElementById("editName").value = userDetail.name;
        document.getElementById("editUserName").value = userDetail.username;
        document.getElementById("editUserRole").value = roleMapping[userDetail.role];
        document.getElementById("editUserStatus").value = statusMapping[userDetail.status];
        document.getElementById("editFinancialYear").value = userDetail.financial_year;
        document.getElementById("editBusinessTarget").value = userDetail.business_target;
        document.getElementById("editAchievedTillDate").value = userDetail.achieved_till_date;
        document.getElementById("editBalanceToGo").value = userDetail.balance_to_go;
        document.getElementById("editDesignation").value = userDetail.designation;
        document.getElementById("editSalesManager").value = userDetail.sales_manager;

        document.getElementById("editUserModel").classList.remove("hidden");
    }

    // Function to close Edit User Modal
    function closeEditUserModel() {
        document.getElementById("editUserModel").classList.add("hidden");
    }

    // Function to delete a user
    function deleteUser(userId) {
        const isConfirm = confirm("Are you sure you want to delete ?");

        if (isConfirm) {
            fetch('/delete-user', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({userId: userId})
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Password changed successfully.");
                        closePasswordChangeModal();
                    } else {
                        alert("Error changing password.");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert("There was an error processing your request.");
                });
        }


    }


</script>

<!--pdf, excel and print report -->
<script>
    const company = <%- JSON.stringify(company) %>;

    // function generatePDF(data, type, company) {
    //     const {jsPDF} = window.jspdf;
    //     const doc = new jsPDF();
    //
    //     if (data.length === 0) {
    //         alert("Unable to export data into PDF as there is no data.");
    //         return; // Exit the function if no data is present
    //     }
    //
    //     const pageWidth = doc.internal.pageSize.width;
    //     const pageHeight = doc.internal.pageSize.height;
    //
    //     const currentDate = new Date();
    //     const formattedDate = currentDate.toISOString().split("T")[0];
    //
    //     doc.setFontSize(12);
    //     doc.text(company.name, (pageWidth - doc.getTextWidth(company.name)) / 2, 20);
    //     doc.text(company.address, (pageWidth - doc.getTextWidth(company.address)) / 2, 25);
    //     doc.text(`City: ${company.city}, State: ${company.state}, Country: ${company.country}`,
    //         (pageWidth - 70) / 2, 30);
    //     doc.text(`GSTIN: ${company.gstin}, Email: ${company.email} , Mobile: ${company.mobile}`,
    //         (pageWidth - 150) / 2, 35);
    //     doc.text(`Website: ${company.website}, PAN: ${company.pan_number}`, (pageWidth - 70) / 2, 40);
    //
    //     const reportTitle = `${type.charAt(0).toUpperCase() + type.slice(1)} Report`;
    //     doc.setFontSize(12);
    //     doc.text(reportTitle, pageWidth / 2 - doc.getTextWidth(reportTitle) / 2, 55);
    //
    //     const header = [
    //         "Date", "Service Name", "Description", "Serial No", "Edition",
    //         "Amount Billed", "GST Amount", "Total Amount", "Next Renew Date", "Remarks"
    //     ];
    //
    //     doc.setFontSize(8);
    //     const columnWidth = 20;
    //     const rowHeight = 10;
    //     let yPos = 65;
    //
    //     // Function to wrap text based on column width and return the number of lines
    //     function wrapText(doc, text, xPos, yPos, maxWidth) {
    //         const words = text.split(' ');
    //         let line = '';
    //         let lineCount = 1; // Start with 1 line
    //
    //         const lineHeight = 3; // Space between lines
    //         words.forEach((word) => {
    //             const testLine = line ? line + ' ' + word : word;
    //             const testWidth = doc.getTextWidth(testLine);
    //
    //             if (testWidth <= maxWidth) {
    //                 line = testLine;
    //             } else {
    //                 doc.text(line, xPos, yPos);
    //                 yPos += lineHeight;
    //                 lineCount++; // Increment the line count
    //                 line = word; // Start a new line with the current word
    //             }
    //         });
    //         doc.text(line, xPos, yPos); // Draw the last line
    //         return lineCount; // Return the number of lines used
    //     }
    //
    //     // Dynamic Height Calculation for Headers
    //     const headerLineCounts = [];
    //     header.forEach((column, index) => {
    //         const xPos = 5 + index * columnWidth;
    //         const lineCount = wrapText(doc, column, xPos, yPos + 5, columnWidth - 5); // Adjust for wrapping
    //         headerLineCounts.push(lineCount); // Store the line count for each header column
    //     });
    //
    //     // Get the maximum row height for the header
    //     const headerRowHeight = Math.max(...headerLineCounts) + 2;
    //
    //     // Draw table header with dynamic height based on wrapped text
    //     header.forEach((column, index) => {
    //         const xPos = 5 + index * columnWidth;
    //         doc.rect(xPos, yPos, columnWidth, Math.max(headerRowHeight * 3, 10)); // Ensure minimum height of 10
    //     });
    //
    //     yPos += Math.max(headerRowHeight * 3, 10) + 5; // Space after header
    //
    //     // Format the date and next renewal date
    //     const formatDate = (dateString) => {
    //         const date = new Date(dateString);
    //         return (
    //             date.getFullYear() +
    //             "-" +
    //             ("0" + (date.getMonth() + 1)).slice(-2) +
    //             "-" +
    //             ("0" + date.getDate()).slice(-2)
    //         ); // yyyy-mm-dd format
    //     };
    //
    //     let totalAmountBilled = 0;
    //     let totalGstAmount = 0;
    //     let totalAmount = 0;
    //
    //     doc.setFontSize(8);
    //     data.forEach((item) => {
    //         let rowHeight = 0; // Track the maximum row height for the current data row
    //
    //         // Format date fields
    //         const formattedDateValue = formatDate(item.date);
    //         const formattedNextRenewalDate = formatDate(item.next_renew_date);
    //
    //         const rowLineCounts = [];
    //         // Calculate the number of lines for each column in the current data row
    //         header.forEach((column, index) => {
    //             const cellValue =
    //                 column === "Date" ? formattedDateValue :
    //                     column === "Next Renew Date" ? (item.next_renew_date ? formattedNextRenewalDate : "") :
    //                         item[column.toLowerCase().replace(" ", "_")];
    //
    //             const xPos = 5 + index * columnWidth;
    //             const lineCount = wrapText(doc, cellValue ? cellValue.toString() : "-", xPos, yPos, columnWidth - 5);
    //
    //             rowLineCounts.push(lineCount); // Store line counts for data row columns
    //         });
    //
    //         // Get the maximum row height for the current data row
    //         rowHeight = Math.max(...rowLineCounts) + 2;
    //
    //         // Draw the rectangles for the data row with dynamic height
    //         header.forEach((column, index) => {
    //             const xPos = 5 + index * columnWidth;
    //             doc.rect(xPos, yPos - 5, columnWidth, Math.max(rowHeight * 3, 10)); // Ensure minimum height of 10
    //         });
    //
    //         yPos += Math.max(rowHeight * 3, 10); // Increase the vertical position based on row height
    //
    //         // Accumulate totals
    //         totalAmountBilled += parseFloat(item.amount_billed) || 0;
    //         totalGstAmount += parseFloat(item.gst_amount) || 0;
    //         totalAmount += parseFloat(item.total_amount) || 0;
    //
    //         // Ensure the content doesn't exceed the A4 page size
    //         if (yPos > pageHeight - 20) {
    //             doc.addPage();
    //             yPos = 20;
    //         }
    //     });
    //
    //     // Add the totals row at the end
    //     const totalsLabel = "Total";
    //     const totalsValues = [
    //         "", "Total", "", "", "",
    //         totalAmountBilled.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ","),
    //         totalGstAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ","),
    //         totalAmount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ","),
    //         "", ""
    //     ];
    //
    //     // Draw the totals row
    //     const totalLineCounts = [];
    //     totalsValues.forEach((value, index) => {
    //         const xPos = 5 + index * columnWidth;
    //         const lineCount = wrapText(doc, value.toString(), xPos, yPos, columnWidth - 5);
    //         totalLineCounts.push(lineCount);
    //     });
    //
    //     // Get the maximum row height for the totals row
    //     const totalRowHeight = Math.max(...totalLineCounts) + 2;
    //     totalsValues.forEach((value, index) => {
    //         const xPos = 5 + index * columnWidth;
    //         doc.rect(xPos, yPos - 5, columnWidth, Math.max(totalRowHeight * 3, 10)); // Ensure minimum height of 10
    //     });
    //
    //     yPos += Math.max(totalRowHeight * 3, 10); // Increase the vertical position based on row height
    //
    //     // Ensure the content doesn't exceed the A4 page size
    //     if (yPos > pageHeight - 20) {
    //         doc.addPage();
    //         yPos = 20;
    //     }
    //
    //     const timestamp = new Date().toISOString().replace(/[-:T.]/g, "").slice(0, 14);
    //     const fileName = `${type.charAt(0).toUpperCase() + type.slice(1)}_report_${timestamp}.pdf`;
    //     doc.save(fileName);
    // }


    function generateExcel(dataType, sales, quotations, columnToRemove = ["user_id", "voucher_number"]) {
        const wb = XLSX.utils.book_new();
        let data;
        let sheetName;

        // Function to filter and format the data
        function filterFieldsAndFormatDates(data) {
            return data.map((item) => {
                const {
                    id,
                    user_role,
                    created_by,
                    created_date,
                    voucher_number,
                    vch_type_name,
                    type,
                    updated_by,
                    updated_date,
                    ...filteredItem
                } = item;

                if (columnToRemove && filteredItem.hasOwnProperty(columnToRemove)) {
                    delete filteredItem[columnToRemove];
                }

                // Format dates
                if (filteredItem.date) {
                    filteredItem.date = new Date(filteredItem.date).toISOString().split("T")[0];
                }
                if (filteredItem.next_renewal_date) {
                    filteredItem.next_renewal_date = new Date(filteredItem.next_renewal_date).toISOString().split("T")[0];
                }

                return filteredItem;
            });
        }

        // Select the data based on dataType (either "sales" or "quotations")
        if (dataType === "sales" && sales && sales.length > 0) {
            data = filterFieldsAndFormatDates(sales);
            sheetName = "Sales";
        } else if (dataType === "quotations" && quotations && quotations.length > 0) {
            data = filterFieldsAndFormatDates(quotations);
            sheetName = "Quotations";
        } else {
            // If no data is available for the selected dataType, return immediately (no sheet to generate)
            alert("Unable to export data into excel as there is no data.");
            return;
        }

        // Create the worksheet from the data
        const ws = XLSX.utils.json_to_sheet(data);

        // Add the total row only if there's data to calculate totals for
        if (data.length > 0) {
            const totalRow = {
                amount_billed: data.reduce((sum, item) => sum + (parseFloat(item.amount_billed) || 0), 0),
                gst_amount: data.reduce((sum, item) => sum + (parseFloat(item.gst_amount) || 0), 0),
                total_amount: data.reduce((sum, item) => sum + (parseFloat(item.total_amount) || 0), 0),
            };

            // Position for the total row
            const totalRowIndex = data.length + 2;

            // Insert the total row with labels and values
            ws[`B${totalRowIndex}`] = {v: "Total", t: "s"};
            ws[`F${totalRowIndex}`] = {v: totalRow.amount_billed, t: "n"};
            ws[`G${totalRowIndex}`] = {v: totalRow.gst_amount, t: "n"};
            ws[`H${totalRowIndex}`] = {v: totalRow.total_amount, t: "n"};

            // Update the range to include the total row
            ws['!ref'] = `A1:M${totalRowIndex}`;
        }

        // Append the sheet to the workbook
        XLSX.utils.book_append_sheet(wb, ws, sheetName);

        // Generate the filename with a timestamp
        const timestamp = new Date()
            .toISOString()
            .replace(/[-:T.]/g, "")
            .slice(0, 14);

        const filename = `${dataType}_report_${timestamp}.xlsx`;

        // Write the Excel file
        XLSX.writeFile(wb, filename);
    }

    function printData(sectionId, sales, quotations) {
        // Get the section content to print by ID
        const sectionContent = document.getElementById(sectionId).innerHTML;

        // Create a new window for printing
        const printWindow = window.open("", "_parent");
        printWindow.document.write("<html><head><title>Print</title>");


        // Add any linked stylesheets for consistent styling
        const stylesheets = Array.from(
            document.querySelectorAll('link[rel="stylesheet"]')
        );
        stylesheets.forEach((link) => {
            printWindow.document.write(
                `<link rel="stylesheet" href="${link.href}">`
            );
        });

        printWindow.document.write("</head><body>");

        printWindow.document.write(`
                <div style="background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); text-align: center;  width: 100%;">
                    <h1 style="font-size: 1.5rem; color: #333; font-weight: bold; margin-bottom: 10px;">${company.name}</h1>
                    <p style="color: #555;"> ${company.address} - ${company.city} - ${company.state} - ${company.country} </p>

                    <div style="display: flex; gap: 10px; text-align: left;justify-content:center;">
                      <div style="display: flex; align-items: center; color: #555;">
                        <svg xmlns="http://www.w3.org/2000/svg" style="width: 20px; height: 20px; margin-right: 8px;" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M3 8l7.071 4.514a3 3 0 003.858 0L21 8m0 0V5a2 2 0 00-2-2H5a2 2 0 00-2 2v3m18 0l-7.071 4.514a3 3 0 01-3.858 0L3 8"></path>
                        </svg>
                        ${company.email}
                      </div>
                      <div style="display: flex; align-items: center; color: #555;">
                        <svg xmlns="http://www.w3.org/2000/svg" style="width: 20px; height: 20px; margin-right: 8px;" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M3 10l1-4a2 2 0 012-2h2a2 2 0 012 2v4M7 7h.01M4 10v6a2 2 0 002 2h2a2 2 0 002-2v-6m5 0h2a2 2 0 012 2v4a2 2 0 01-2 2h-2m-6 0h.01M3 10h.01"></path>
                        </svg>
                        ${company.mobile}
                      </div>
                      <div style="display: flex; align-items: center; color: #555;">
                        <svg xmlns="http://www.w3.org/2000/svg" style="width: 20px; height: 20px; margin-right: 8px;" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M12 3a9 9 0 00-6.7 15.3A8.961 8.961 0 0112 21a8.961 8.961 0 006.7-2.7A9 9 0 0012 3z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" d="M15 12H9"></path>
                        </svg>
                        ${company.website}
                      </div>
                    </div>

                    <div style="margin-top: 16px; color: #555; font-size: 1.2rem; justify-content:center; display:flex; gap:10px;">
                      <p><strong>GSTIN:</strong> ${company.gstin}</p>
                      <p><strong>PAN:</strong> ${company.pan_number}</p>
                    </div>
              </div>`);

        printWindow.document.write(`<div class="text-semibold text-2xl flex w-full justify-center items-center my-4" > ${sectionId.toLocaleUpperCase()} REPORT </div>`)
        printWindow.document.write("<style> table,th,td {border: 1px solid black; border-collapse: collapse;} </style>")
        printWindow.document.write("<style> .table_right{text-align: right} </style>")
        printWindow.document.write("<table>");
        printWindow.document.write("<tr>");
        printWindow.document.write("<th> Date </th>");
        printWindow.document.write("<th> Product Name </th>");
        printWindow.document.write("<th> Description </th>");
        printWindow.document.write("<th> Batch No </th>");
        printWindow.document.write("<th> Edition </th>");
        printWindow.document.write("<th> Amount Billed </th>");
        printWindow.document.write("<th> GST Amount </th>");
        printWindow.document.write("<th> Total Amount </th>");
        printWindow.document.write("<th> Next Renew Date </th>");
        printWindow.document.write("<th> Remarks </th>");
        printWindow.document.write("</tr>");

        if (sectionId === "quotations") {
            quotations.map((quotation, index) => {
                printWindow.document.write("<tr>");
                printWindow.document.write(
                    `<td> ${
                        new Date(quotation?.date).toISOString().split("T")[0]
                    } </td>`
                );
                printWindow.document.write(
                    `<td> ${quotation?.service_name} </td>`
                );
                printWindow.document.write(
                    `<td> ${quotation?.description} </td>`
                );
                printWindow.document.write(
                    `<td> ${quotation?.serial_no} </td>`
                );
                printWindow.document.write(`<td> ${quotation?.edition} </td>`);
                printWindow.document.write(
                    `<td class="table_right" > ${quotation?.amount_billed} </td>`
                );
                printWindow.document.write(`<td class="table_right" > ${quotation?.gst_amount} </td>`);
                printWindow.document.write(
                    `<td class="table_right" > ${quotation?.total_amount} </td>`
                );
                printWindow.document.write(
                    `<td> ${
                        (quotation.next_renewal_date && quotation.next_renew_date !== undefined && quotation.next_renew_date !== null) ? new Date(quotation.next_renew_date).toISOString().split("T")[0] : ""
                    } </td>`
                );
                printWindow.document.write(`<td> ${quotation?.remarks} </td>`);
                printWindow.document.write("</tr>");

            });
            if (quotations && quotations.length > 0) {
                printWindow.document.write(`
                        <tr ">
                            <td></td>
                            <td class="min-w-[8rem] font-semibold flex items-center justify-end">Total</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td class="font-semibold table_right" > <%- amountQuotation.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), 2 %> </td>
                            <td class="font-semibold table_right" ><%- gstQuotation.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                            <td class="font-semibold table_right" ><%- totalQuotation.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                            <td class="min-w-[8rem]"></td>
                            <td></td>
                        </tr>
                    `);
            }
        } else if (sectionId === "sales") {
            sales.map((sale, index) => {
                printWindow.document.write("<tr>");
                printWindow.document.write(
                    `<td> ${new Date(sale?.date).toISOString().split("T")[0]} </td>`
                );
                printWindow.document.write(
                    `<td> ${sale?.service_name} </td>`
                );
                printWindow.document.write(
                    `<td> ${sale?.description} </td>`
                );
                printWindow.document.write(
                    `<td> ${sale?.serial_no} </td>`
                );
                printWindow.document.write(`<td> ${sale?.edition} </td>`);
                printWindow.document.write(`<td class="table_right"> ${sale?.amount_billed} </td>`);
                printWindow.document.write(`<td class="table_right"> ${sale?.gst_amount} </td>`);
                printWindow.document.write(
                    `<td class="table_right"> ${sale?.total_amount} </td>`
                );
                printWindow.document.write(
                    `<td> ${
                        (sale.next_renewal_date && sale.next_renew_date !== undefined && sale.next_renew_date !== null) ? new Date(sale.next_renew_date).toISOString().split("T")[0] : ""
                    } </td>`
                );
                printWindow.document.write(`<td> ${sale?.remarks} </td>`);
                printWindow.document.write("</tr>");
            });
            if (sales && sales.length > 0) {
                printWindow.document.write(`
                        <tr ">
                            <td></td>
                            <td class="min-w-[8rem] font-semibold flex items-center justify-end">Total</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td class="font-semibold table_right" > <%- amountSales.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %> </td>
                            <td class="font-semibold table_right" ><%- gstSales.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                            <td class="font-semibold table_right" ><%- totalSales.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") %></td>
                            <td class="min-w-[8rem]"></td>
                            <td></td>
                        </tr>
                    `);
            }
        }
        printWindow.document.write("</table>");
        printWindow.document.write("</body></html>");

        // Close the document for rendering
        printWindow.document.close();

        // Trigger the print dialog
        printWindow.print();

        // Optional: Close the print window after printing
        printWindow.onafterprint = () => {
            printWindow.close();
        };
    }
</script>


<!--chart -->
<script>

    window.onload = function () {
        // Get the canvas element
        var ctx = document.getElementById('myPieChart').getContext('2d');
        const financialTargetJs = <%- JSON.stringify(financialTarget) %>;

        const color_balance = document.getElementById("color-balance");
        const color_achieved = document.getElementById("color-achieve");

        color_balance.style.backgroundColor = "#FFCE56";
        color_achieved.style.backgroundColor = "#36A2EB";

        // Create a new Pie chart
        var myPieChart = new Chart(ctx, {
            type: 'pie', // Pie chart type
            data: {
                labels: ['Achieved Till Date', 'Balance To Go'], // Data labels
                datasets: [{
                    data: [financialTargetJs[0].achieved_till_date, financialTargetJs[0].balance_to_go],
                    backgroundColor: ['#36A2EB', '#FFCE56'], // Segment colors
                    hoverBackgroundColor: ['#36A2EB', '#FFCE56'], // Hover colors
                }]
            },
            options: {
                responsive: true, // Make the chart responsive
                plugins: {
                    legend: {
                        display: false, // Hide the legend
                    },
                },
            }
        });
    };
</script>


<script src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

</body>
</html>
